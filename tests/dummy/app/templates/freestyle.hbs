{{#freestyle-guide title="Ember Freestyle" subtitle="Living Style Guide"}}
  {{!-- DROPDOWN --}}
  {{#freestyle-section name="dropdown"}}

    <ViewModeControl @viewMode={{viewMode}} @showLabelInViewMode={{showLabelInViewMode}} />

    {{#freestyle-collection title="dropdown" defaultKey="default" inline=true as |collection|}}
      {{#collection.variant key="default"}}
        {{#freestyle-note "dropdown--notes"}}
          ```
          countries = [
            { name: 'United States' },
            { name: 'Spain' },
            { name: 'Portugal' },
            { name: 'Russia' },
            { name: 'Latvia' },
            { name: 'Brazil' },
            { name: 'United Kingdom' }
          ];
          ```
        {{/freestyle-note}}
        {{#freestyle-usage "dropdown" title="Dropdown"}}
          <Dropdown @options={{countries}} @label="Select a country" @mode={{mode}} @showLabelInViewMode={{showLabelInViewMode}} />
        {{/freestyle-usage}}
        {{#freestyle-usage "dropdown-disabled" title="Disabled"}}
          <Dropdown @options={{countries}} @disabled={{true}} @mode={{mode}} @showLabelInViewMode={{showLabelInViewMode}} />
        {{/freestyle-usage}}
        {{#freestyle-usage "dropdown-search-disabled" title="With No Search Box"}}
          <Dropdown @options={{countries}} @searchEnabled={{false}} @mode={{mode}} @showLabelInViewMode={{showLabelInViewMode}} />
        {{/freestyle-usage}}
        {{#freestyle-usage "dropdown-clear-button" title="With No Clear Button"}}
          <Dropdown @options={{countries}} @allowClear={{false}} @mode={{mode}} @showLabelInViewMode={{showLabelInViewMode}} />
        {{/freestyle-usage}}
      {{/collection.variant}}
      {{#collection.variant key="custom-search-field"}}
        {{#freestyle-note "dropdown-custom-search-field--notes"}}
          ```
          countries = [
            { formalName: 'United States of America' },
            { formalName: 'Kingdom of Spain' },
            { formalName: 'Portuguese Republic' },
            { formalName: 'Russian Federation' },
            { formalName: 'Republic of Latvia' },
            { formalName: 'Federative Republic of Brazil' },
            { formalName: 'United Kingdom of Great Britain and Northern Ireland' }
          ];
          ```
        {{/freestyle-note}}
        {{#freestyle-usage "dropdown-custom-search-field" title="Dropdown with custom search field"}}
          <Dropdown @options={{countries}} @label="Select a country" @searchField="formalName" @mode={{mode}} @showLabelInViewMode={{showLabelInViewMode}} />
        {{/freestyle-usage}}
      {{/collection.variant}}
      {{#collection.variant key="with-default-selected"}}
        {{#freestyle-note "dropdown-with-default-selected--notes"}}
          ```
          export default Component.extend({
            // ...
            selected: { name: "Spain" }
          });
          ```
        {{/freestyle-note}}
        {{#freestyle-usage "dropdown-with-default-selected" title="Dropdown with default selected"}}
          <Dropdown @options={{countries}} @label="Select a country" @selected={{selected}} @mode={{mode}} @showLabelInViewMode={{showLabelInViewMode}} />
        {{/freestyle-usage}}
      {{/collection.variant}}
      {{#collection.variant key="with-custom-search-action"}}
        {{#freestyle-note "dropdown-with-custom-search-action--notes"}}
          ```
          countries = [
            { name: 'United States' },
            { name: 'Spain' },
            { name: 'Portugal' },
            { name: 'Russia' },
            { name: 'Latvia' },
            { name: 'Brazil' },
            { name: 'United Kingdom' }
          ];

          searchByLengthOfCountryName = async num => {
            return Promise.resolve(countries.filter(item => {
              return item.name.length === parseInt(num);
            }));
          };
          ```
          `@searchAction` must be an `async` function that returns an array of items.
        {{/freestyle-note}}
        {{#freestyle-usage "dropdown-with-custom-search-action" title="Dropdown with custom search action"}}
          <Dropdown @searchAction={{action searchByLengthOfCountryName}} @label="Enter number of letters" @mode={{mode}} @showLabelInViewMode={{showLabelInViewMode}} />
        {{/freestyle-usage}}
      {{/collection.variant}}
      {{#collection.variant key="multi-select"}}
        {{#freestyle-usage "dropdown-multiple" title="Multiple Select Dropdown"}}
          <Dropdown @options={{countries}} @label="Select a country" @multiple={{true}} @mode={{mode}} @showLabelInViewMode={{showLabelInViewMode}} />
        {{/freestyle-usage}}
      {{/collection.variant}}
      {{#collection.variant key="with-customized-options"}}
        {{#freestyle-note "dropdown-with-customized-options--notes"}}
          ```
          const customDropdownOptions = [
            {
              imageUrl: 'https://via.placeholder.com/50x35',
              cardType: 'Ether',
              transactionId: '0xCb3d...C16fc',
              network: 'Mainnet',
              fromValue: '15.3532 ETH',
              toValue: '$3993.7 USD'
            },
            {
              imageUrl: 'https://via.placeholder.com/50x35',
              cardType: 'Bitcoin',
              transactionId: '0xCb3a...C36fc',
              network: 'Rinkeby',
              fromValue: '2.3532 BTC',
              toValue: '$8509 USD'
            },
            {
              imageUrl: 'https://via.placeholder.com/50x35',
              cardType: 'Litecoin',
              transactionId: '0xCb3a...B96fa',
              network: 'Ropstein',
              fromValue: '82.92 LIT',
              toValue: '$2547 USD'
            }
          ];
          export default Component.extend({
            // ...
            customDropdownOptions,
            selectedCrypto: customDropdownOptions[1],
          });


          // custom-option.hbs

          <span><img src={{option.imageUrl}} alt="card"></span>
          <span class="caps">{{option.cardType}}</span>
          <span class="lightweight">{{option.transactionId}}</span>
          <span class="lightweight caps">{{option.network}}</span>
          <span class="lightweight">{{option.fromValue}}</span>
          <span class="lightweight">{{option.toValue}}</span>
          ```

        {{/freestyle-note}}
        {{#freestyle-usage "dropdown-with-customized-options" title="Dropdown with customized options"}}
          <Dropdown @options={{customDropdownOptions}} @label="Payment method" @optionComponent="custom-option" @mode={{mode}} @showLabelInViewMode={{showLabelInViewMode}} />
        {{/freestyle-usage}}
      {{/collection.variant}}
      {{#collection.variant key="themed"}}
        {{#freestyle-usage "dropdown-themed" title="Themed"}}
          <Dropdown @options={{countries}} @label="Select a country" @theme="cs-theme" />
        {{/freestyle-usage}}
        {{#freestyle-note "dropdown-themed--notes"}}
          <p>Pass a pre-defined theme name to the <code>@theme</code> attribute on your component.</p>
          <p>Available themes: <code>cs-theme</code></p>
        {{/freestyle-note}}
        {{#freestyle-annotation}}
          <h2>How to Create a Theme for This Component</h2>
          <ol>
            <li>Define a new CSS class on your stylesheet.</li>
            <li>Change the values set to available CSS variables (see list below).</li>
            <li>Pass the CSS class name to the <code>@theme</code> attribute on your <code>Dropdown</code> component.</li>
            <li>More specific CSS changes can be made using <code>ember-power-select</code> classes nested inside your theme class.</li>
          </ol>
          <h2>Customizable CSS variables</h2>
          <b>Note: <code>--cs-component</code> prefixed values below are inherited from the root level, but can still be customized with a theme.</b>
          <pre>
            <code>
              .your-theme-name {
              <b>Sizing</b>
              --cs-dropdown-max-width                   // --cs-component-max-width
              --cs-dropdown-height                      // --cs-component-height
              --cs-dropdown-text-box-height             // 1.75em

              <b>Spacing</b>
              --cs-dropdown-padding-horizontal          // --cs-component-padding-horizontal
              --cs-dropdown-padding-vertical            // --cs-component-padding-vertical

              <b>Text</b>
              --cs-dropdown-color                       // --cs-component-color
              --cs-dropdown-font-size                   // --cs-component-font-size

              <b>Label</b>
              --cs-dropdown-label-color                 // --cs-component-label-color
              --cs-dropdown-label-font-size             // --cs-dropdown-font-size
              --cs-dropdown-label-font-weight           // --cs-dropdown-font-weight
              --cs-dropdown-label-highlight-color       // --cs-component-label-highlight-color
              --cs-dropdown-label-highlight-font-size   // 12px
              --cs-dropdown-label-minimized-color       // --cs-dropdown-label-color

              <b>Background properties</b>
              --cs-dropdown-background-color  // --cs-component-background-color
              --cs-dropdown-background-hover  // --cs-component-background-highlight-color

              <b>Borders</b>
              --cs-dropdown-border-color      // --cs-component-border-color
              --cs-dropdown-border-radius     // --cs-component-border-radius

              <b>Options</b>
              --cs-dropdown-selected-color    // --cs-component-selected-color
              }
            </code>
          </pre>
        {{/freestyle-annotation}}
      {{/collection.variant}}
    {{/freestyle-collection}}
  {{/freestyle-section}}


  {{!-- CTA --}}
  {{#freestyle-section name="cta"}}
    {{#freestyle-collection title="CTA" defaultKey="primary" inline=true as |collection|}}
      {{#collection.variant key="primary"}}
        {{#freestyle-usage "primary-cta" title="Primary CTA"}}
          <Cta>Primary Call to Action</Cta>
        {{/freestyle-usage}}
      {{/collection.variant}}
      {{#freestyle-note "primary-cta--notes"}}
        By default, `Cta` will render a primary type
      {{/freestyle-note}}
      {{#collection.variant key="secondary"}}
        {{#freestyle-usage "secondary-cta" title="Secondary CTA"}}
          <Cta @variant="secondary">Secondary Call to Action</Cta>
        {{/freestyle-usage}}
      {{/collection.variant}}
      {{#collection.variant key="without-block"}}
        {{#freestyle-usage "cta" title="Primary CTA without block"}}
          <Cta @label="Hello" />
        {{/freestyle-usage}}
      {{/collection.variant}}
      {{#collection.variant key="disabled"}}
        {{#freestyle-usage "disabled-cta" title="Disabled CTA" inline=true}}
          <Cta @disabled="true">Disabled</Cta>
        {{/freestyle-usage}}
      {{/collection.variant}}
      {{#collection.variant key="secondary-disabled"}}
        {{#freestyle-usage "secondary-disabled-cta" title="Secondary Disabled CTA" inline=true}}
          <Cta @variant="secondary" @disabled="true">Secondary Disabled</Cta>
        {{/freestyle-usage}}
      {{/collection.variant}}
      {{#collection.variant key="loading"}}
        {{#freestyle-usage "loading-cta" title="Loading CTA" inline=true}}
          <Cta @isLoading={{isLoading}} @handleClick={{action showLoadingState}}>Click to load</Cta>
        {{/freestyle-usage}}
      {{/collection.variant}}
      {{#collection.variant key="themed"}}
        {{#freestyle-usage "primary-cta-themed" title="Themed Primary CTA" inline=true}}
          <Cta @variant="primary" @theme="cs-theme">Button</Cta>
        {{/freestyle-usage}}
        {{#freestyle-usage "secondary-cta-themed" title="Themed Secondary CTA" inline=true}}
          <Cta @variant="secondary" @theme="cs-theme">Button</Cta>
        {{/freestyle-usage}}
        {{#freestyle-note "primary-cta-themed--notes"}}
          <p>
            Pass a pre-defined theme name to the <code>@theme</code> attribute on your component.
            Themes affect all variants of a button.
          </p>
          <p>Available variants: <code>primary</code> (solid background button); <code>secondary</code> (outline button with transparent background)</p>
          <p>Available themes: <code>cs-theme</code></p>
        {{/freestyle-note}}
        {{#freestyle-annotation}}
          <h2>How to Create a Theme for This Component</h2>
          <ol>
            <li>Define a new CSS class on your stylesheet. This will be the theme name.</li>
            <li>Change the values set to available CSS variables (see list below).</li>
            <li>Pass the theme name to the <code>@theme</code> attribute on the component.</li>
          </ol>
          <h2>Customizable CSS variables</h2>
          <b>Note: <code>--cs-component</code> prefixed values below are inherited from the root level, but can still be customized with a theme.</b>
          <pre>
            <code>
              .your-theme-name {
              <b>Common</b>
              --cs-cta-width                // auto
              --cs-cta-height               // auto
              --cs-cta-padding-horizontal   // 20px
              --cs-cta-padding-vertical     // 12px
              --cs-cta-font-size            // 14px
              --cs-cta-font-weight          // 600
              --cs-cta-line-height          // 1
              --cs-cta-border-radius        // <b>--cs-component-border-radius</b>
              --cs-cta-box-shadow           // <b>--cs-component-box-shadow</b>

              <b>Primary-variant only</b>
              --cs-cta-color                      // white
              --cs-cta-background-color           // gray (#5d5d5d)
              --cs-cta-border-color               // --cs-cta-background-color

              <b>Primary-variant: Hover state</b>
              --cs-cta-hover-color                // white
              --cs-cta-hover-background-color     // dark-gray (#222)

              <b>Primary-variant: Disabled state</b>
              --cs-cta-disabled-color             // dark-gray with opacity 0.4
              --cs-cta-disabled-background-color  // dark-gray with opacity 0.2
              --cs-cta-disabled-border-color      // --cs-cta-disabled-background-color

              <b>Secondary-variant only</b>
              --cs-cta-secondary-color            // dark-gray
              --cs-cta-secondary-background-color // transparent
              --cs-cta-secondary-border-color     // --cs-cta-secondary-color

              <b>Secondary-variant: Hover state</b>
              --cs-cta-secondary-hover-color              // --cs-cta-hover-color
              --cs-cta-secondary-hover-background-color   // --cs-cta-hover-background-color

              <b>Secondary-variant: Disabled state</b>
              --cs-cta-secondary-disabled-color           // --cs-cta-disabled-color
              --cs-cta-secondary-disabled-border-color    // --cs-cta-disabled-border-color
              }
            </code>
          </pre>
        {{/freestyle-annotation}}
      {{/collection.variant}}
    {{/freestyle-collection}}
  {{/freestyle-section}}


  {{!-- TEXT FIELD --}}
  {{#freestyle-section name="TextField"}}

    <ViewModeControl @viewMode={{viewMode}} @showLabelInViewMode={{showLabelInViewMode}} />

    {{#freestyle-collection title="TextField" defaultKey="default" inline=true as |collection|}}
      {{#collection.variant key="default"}}
        {{#freestyle-usage "text-field-default" title="Default"}}
          <TextField @label="What's your name?" @mode={{mode}} @showLabelInViewMode={{showLabelInViewMode}} />
        {{/freestyle-usage}}
      {{/collection.variant}}
      {{#collection.variant key="required"}}
        {{#freestyle-usage "text-field-required" title="Required"}}
          <TextField @label="What's your name?" @required={{true}} @mode={{mode}} @showLabelInViewMode={{showLabelInViewMode}} />
        {{/freestyle-usage}}
      {{/collection.variant}}
      {{#collection.variant key="disabled"}}
        {{#freestyle-usage "text-field-disabled" title="Disabled"}}
          <TextField @label="What's your name?" @disabled={{true}} @mode={{mode}} @showLabelInViewMode={{showLabelInViewMode}} />
        {{/freestyle-usage}}
      {{/collection.variant}}
      {{#collection.variant key="themed"}}
        {{#freestyle-usage "text-field-themed" title="Themed"}}
          <TextField @label="What's your name?" @theme="cs-theme" @mode={{mode}} @showLabelInViewMode={{showLabelInViewMode}} />
        {{/freestyle-usage}}
        {{#freestyle-note "text-field-themed--notes"}}
          <p>Pass a pre-defined theme name to the <code>@theme</code> attribute on your component.</p>
          <p>Available themes: <code>cs-theme</code></p>
        {{/freestyle-note}}
        {{#freestyle-annotation}}
          <h2>How to Create a Theme for This Component</h2>
          <ol>
            <li>Define a new CSS class on your stylesheet.</li>
            <li>Change the values set to available CSS variables (see list below).</li>
            <li>Pass the CSS class name to the <code>@theme</code> attribute on the component.</li>
          </ol>

          <h2>Customizable CSS variables</h2>
          <b>Note: <code>--cs-component</code> prefixed values below are inherited from the root level, but can still be customized with a theme.</b>
          <pre>
            <code>
              <b>CSS custom property:</b>               // <b>Default value:</b>
              --cs-text-field-max-width                 // --cs-component-max-width
              --cs-text-field-height                    // --cs-component-height
              --cs-text-field-padding-horizontal        // --cs-component-padding-horizontal
              --cs-text-field-padding-vertical          // --cs-component-padding-vertical

              --cs-text-field-color                     // --cs-component-color
              --cs-text-field-font-size:                // --cs-component-font-size
              --cs-text-field-background-color          // --cs-component-background-color
              --cs-text-field-border-color              // --cs-component-border-color
              --cs-text-field-border-radius             // --cs-component-border-radius

              --cs-text-field-label-color                // --cs-component-label-color
              --cs-text-field-label-font-size            // --cs-text-field-font-size
              --cs-text-field-label-font-weight:         // --cs-text-field-font-weight
              --cs-text-field-label-highlight-color      // --cs-component-label-highlight-color
              --cs-text-field-label-highlight-font-size  // 12px;
              --cs-text-field-label-minimized-color      // --cs-component-label-minimized-color
              --cs-text-field-label-optional             // --cs-text-field-color

              --cs-text-field-valid                      // --cs-component-valid
              --cs-text-field-invalid                    // --cs-component-invalid
            </code>
          </pre>
        {{/freestyle-annotation}}
      {{/collection.variant}}
    {{/freestyle-collection}}
  {{/freestyle-section}}


  {{!-- PHONE NUMBER --}}
  {{#freestyle-section name="Phone Number Field"}}

    <ViewModeControl @viewMode={{viewMode}} @showLabelInViewMode={{showLabelInViewMode}} />

    {{#freestyle-usage "phone-number-field-default" title="Phone Number Field"}}
      <PhoneNumberField @mode={{mode}} @showLabelInViewMode={{showLabelInViewMode}} />
    {{/freestyle-usage}}
    {{#freestyle-usage "phone-number-field-required" title="Phone Number Field (Required)"}}
      <PhoneNumberField @required={{true}} @mode={{mode}} @showLabelInViewMode={{showLabelInViewMode}} />
    {{/freestyle-usage}}
    {{#freestyle-usage "phone-number-field-multi" title="Phone Number Fields"}}
      <PhoneNumberFields @values={{phoneNumberValues}} @mode={{mode}} @showLabelInViewMode={{showLabelInViewMode}} />
    {{/freestyle-usage}}
    {{#freestyle-usage "phone-number-themed" title="Themed"}}
      <PhoneNumberField @theme="cs-theme" @mode={{mode}} @showLabelInViewMode={{showLabelInViewMode}} />
    {{/freestyle-usage}}
    {{#freestyle-note "phone-number-themed--notes"}}
      <p>Pass a pre-defined theme name to the <code>@theme</code> attribute on your component.</p>
      <p>Available themes: <code>cs-theme</code></p>
    {{/freestyle-note}}
    {{#freestyle-annotation}}
      <h2>How to Create a Theme for This Component</h2>
      <p>This component extends the <code>TextField</code> component. See instructions under the <i>Themed</i> tab on that component's page.</p>
    {{/freestyle-annotation}}

    Phone Numbers JSON:
    <pre>{{stringifiedPhoneNumbers}}</pre>
  {{/freestyle-section}}


  {{!-- TEXTAREA --}}
  {{#freestyle-section name="Text Area"}}

    <ViewModeControl @viewMode={{viewMode}} @showLabelInViewMode={{showLabelInViewMode}} />

    {{#freestyle-collection title="TextArea" defaultKey="default" inline=true as |collection|}}
      {{#collection.variant key="default"}}
        {{#freestyle-usage "text-area-default" title="Text Area"}}
          <TextArea @label="What's on your mind?" @rows={{5}} @mode={{mode}} @showLabelInViewMode={{showLabelInViewMode}} />
        {{/freestyle-usage}}
      {{/collection.variant}}
      {{#collection.variant key="with-max-length"}}
        {{#freestyle-usage "text-area-with-max-length" title="Text Area with Max Length"}}
          <TextArea @label="What's on your mind?" @rows={{5}} @characterLimit={{20}} @mode={{mode}} @showLabelInViewMode={{showLabelInViewMode}} />
        {{/freestyle-usage}}
      {{/collection.variant}}
      {{#collection.variant key="themed"}}
        {{#freestyle-usage "text-area-themed" title="Themed"}}
          <TextArea @label="What's on your mind?" @rows={{5}} @theme="cs-theme" @mode={{mode}} @showLabelInViewMode={{showLabelInViewMode}} />
        {{/freestyle-usage}}
        {{#freestyle-note "text-area-themed--notes"}}
          <p>Pass a pre-defined theme name to the <code>@theme</code> attribute on your component.</p>
          <p>Available themes: <code>cs-theme</code></p>
        {{/freestyle-note}}
        {{#freestyle-annotation}}
          <h2>How to Create a Theme for This Component</h2>
          <p>This component extends the <code>TextField</code> component. See instructions under the <i>Themed</i> tab on that component's page.</p>
          <p>However, if you want your <code>Textarea</code> to be styled differently from your <code>TextField</code> component, you can set the following CSS properties:</p>
          <pre>
            <code>
              <b>CSS custom property:</b>         // <b>Default value:</b>
              --cs-text-area-line-height          // 35px
              --cs-text-area-max-width            // --cs-text-field-max-width
              --cs-text-area-background-color     // --cs-text-field-background-color
              --cs-text-area-border-color         // --cs-text-field-border-color
              --cs-text-area-border-radius        // --cs-text-field-border-radius
              --cs-text-area-char-counter-color   // --cs-text-field-label-color
            </code>
          </pre>
        {{/freestyle-annotation}}
      {{/collection.variant}}
    {{/freestyle-collection}}
  {{/freestyle-section}}


  {{!-- PASSWORD --}}
  {{#freestyle-section name="Password Field"}}
    {{#freestyle-collection title="password" defaultKey="default" inline=true as |collection|}}
      {{#freestyle-annotation}}
        <code>PasswordField</code> can take in a few options that enforce security requirements
        <ul>
          <li><code>minLength</code> - (integer) minimum characters</li>
          <li><code>mustIncludeUppercase</code> - (boolean) must include at least one uppercase character</li>
          <li><code>mustIncludeLowercase</code> - (boolean) must include at least one lowercase character</li>
          <li><code>mustIncludeNumber</code> - (boolean) must include at least one number</li>
          <li><code>mustIncludeSpecialCharacter</code> - (boolean) must include at least one special character</li>
          <li><code>successMessage</code> - (string) message to display when the password is valid</li>
        </ul>
      {{/freestyle-annotation}}
      {{#freestyle-note "password-field-default--notes"}}
        By default, `PasswordField` will render without any of the password requirements except for needing a minimum length of 6.
      {{/freestyle-note}}
      {{#collection.variant key="default"}}
        {{#freestyle-usage "password-field-default" title="Password Field"}}
          <PasswordField />
        {{/freestyle-usage}}
      {{/collection.variant}}
      {{#collection.variant key="with-requirements"}}
        {{#freestyle-usage "password-field-with-requirements" title="Password Field with requirements"}}
          <PasswordField
            @minLength={{8}}
            @mustIncludeUppercase={{true}}
            @mustIncludeLowercase={{true}}
            @mustIncludeNumber={{true}}
            @mustIncludeSpecialCharacter={{true}}
            @successMessage="Nice password ;-)"
          />
        {{/freestyle-usage}}
      {{/collection.variant}}
      {{#collection.variant key="custom-validator"}}
        {{#freestyle-note "password-field-with-custom-validator--notes"}}
          You can define a custom function to validate the password and pass a custom validation message.
          ```
            validator(value) {
              return {
                valid: value === 'cardstack',
                message: 'Password must be "cardstack"'
              };
            }
          ```
        {{/freestyle-note}}
        {{#freestyle-usage "password-field-with-custom-validator" title="Password Field with custom validator function"}}
          <PasswordField @validate={{validator}} />
        {{/freestyle-usage}}
      {{/collection.variant}}
      {{#collection.variant key="themed"}}
        {{#freestyle-usage "password-field-themed" title="Themed"}}
          <PasswordField @theme="cs-theme" />
        {{/freestyle-usage}}
        {{#freestyle-note "password-field-themed--notes"}}
          <p>Pass a pre-defined theme name to the <code>@theme</code> attribute on your component.</p>
          <p>Available themes: <code>cs-theme</code></p>
        {{/freestyle-note}}
        {{#freestyle-annotation}}
          <h2>How to Create a Theme for This Component</h2>
          <p>This component extends the <code>TextField</code> component. See instructions under the <i>Themed</i> tab on that component's page.</p>
        {{/freestyle-annotation}}
      {{/collection.variant}}
    {{/freestyle-collection}}
  {{/freestyle-section}}


  {{!-- CHOOSE ITEMS --}}
  {{#freestyle-section name="Choose Items"}}
    {{#freestyle-usage "text-choose-one" title="Choose One (Text)"}}
      <ChooseOne @legend="What is your Favorite Color?" @choices={{selectItemOptions}} @selectionChanged={{action doSomething}} />
    {{/freestyle-usage}}
    {{#freestyle-note "text-choose-one--notes"}}
      Takes an array of primitives or objects, an optional `label`, and an optional action to be called when selecting an item.
    {{/freestyle-note}}

    {{#freestyle-usage "text-choose-many" title="Choose Many (Text)"}}
      <ChooseMany @legend="What combination makes Purple?" @choices={{selectItemOptions}} @selectionChanged={{action doSomething}} />
    {{/freestyle-usage}}
    {{#freestyle-note "text-choose-many--notes"}}
      Takes an array of primitives or objects, an optional `label`, and an optional action to be called when selecting an item.
    {{/freestyle-note}}
    {{!-- TODO: Themed version --}}
  {{/freestyle-section}}

  {{#freestyle-section name="Choose Contact Type"}}
    {{#freestyle-usage "choose-contact-type" title="Choose Contact Type"}}
      <ChooseContactType @selectionChanged={{action doSomething}} />
    {{/freestyle-usage}}
  {{/freestyle-section}}

  {{!-- EMAIL --}}
  {{#freestyle-section name="Email Input"}}

    <ViewModeControl @viewMode={{viewMode}} @showLabelInViewMode={{showLabelInViewMode}} />

    {{#freestyle-collection title="email" defaultKey="default" inline=true as |collection|}}
      {{#collection.variant key="default"}}
        {{#freestyle-usage "email-input-default" title="Default"}}
          <Email @label="Email Address" @mode={{mode}} @showLabelInViewMode={{showLabelInViewMode}} />
        {{/freestyle-usage}}
      {{/collection.variant}}
      {{#collection.variant key="required"}}
        {{#freestyle-usage "email-input-required" title="Required"}}
          <Email @label="Email Address" @required={{true}} @mode={{mode}} @showLabelInViewMode={{showLabelInViewMode}} />
        {{/freestyle-usage}}
      {{/collection.variant}}
      {{#collection.variant key="multiple"}}
        {{#freestyle-usage "email-multiple" title="Multiple"}}
          <Emails @label="Email Address" @values={{emailValues}} @mode={{mode}} @showLabelInViewMode={{showLabelInViewMode}} />
        {{/freestyle-usage}}
        {{#freestyle-annotation}}
          Emails JSON:
          <pre>{{stringifiedEmails}}</pre>
        {{/freestyle-annotation}}
      {{/collection.variant}}
      {{#collection.variant key="themed"}}
        {{#freestyle-usage "email-input-themed" title="Themed"}}
          <Email @label="Email Address" @theme="cs-theme" @mode={{mode}} @showLabelInViewMode={{showLabelInViewMode}} />
        {{/freestyle-usage}}
        {{#freestyle-note "email-input-themed--notes"}}
          <p>Pass a pre-defined theme name to the <code>@theme</code> attribute on your component.</p>
          <p>Available themes: <code>cs-theme</code></p>
        {{/freestyle-note}}
        {{#freestyle-annotation}}
          <h2>How to Create a Theme for This Component</h2>
          <p>This component extends the <code>TextField</code> component. See instructions under the <i>Themed</i> tab on that component's page.</p>
        {{/freestyle-annotation}}
      {{/collection.variant}}
    {{/freestyle-collection}}
  {{/freestyle-section}}


  {{!-- CHECKBOX --}}
  {{#freestyle-section name="Checkbox (boolean)"}}
    {{#freestyle-usage "checkbox-default" title="Default (Optional)"}}
      <Checkbox @label="Include a free gift in my order" />
    {{/freestyle-usage}}
    {{#freestyle-usage "checkbox-required" title="Required"}}
      <Checkbox @label="I accept the Cardstack Terms of Service" @required={{true}} />
    {{/freestyle-usage}}
    {{#freestyle-usage "checkbox-disabled" title="Disabled"}}
      <Checkbox @label="Enable Dark Mode" @disabled={{true}} />
    {{/freestyle-usage}}
    {{#freestyle-usage "checkbox-default-checked" title="Default Checked"}}
      <Checkbox @label="I would like to subscribe to your newsletter" @checked={{true}} />
    {{/freestyle-usage}}
    {{!-- TODO: Themed version --}}
  {{/freestyle-section}}


  {{!-- STREET ADDRESS --}}
  {{#freestyle-section name="Street Address"}}
    {{#freestyle-collection title="street-address" defaultKey="default" inline=true as |collection|}}
      {{#freestyle-note "street-address--notes"}}
        Uses the Google Places API to search for addresses. A Google Maps API_KEY must be provided with Google Places API
        enabled. Takes an optional `label` property (defaults to "Enter a street address").
      {{/freestyle-note}}
      {{#collection.variant key="default"}}
        {{#freestyle-usage "street-address" title="Street Address"}}
          <StreetAddress @label="Enter your address"/>
        {{/freestyle-usage}}
      {{/collection.variant}}
      {{#collection.variant key="multiple"}}
        {{#freestyle-usage "street-address-multiple" title="Street Address Multiple"}}
          <StreetAddresses @selections={{streetAddresses}} />
        {{/freestyle-usage}}
        {{#freestyle-annotation}}
          Selected addresses JSON:
          <pre>{{stringifiedAddresses}}</pre>
        {{/freestyle-annotation}}
      {{/collection.variant}}
      {{#collection.variant key="themed"}}
        {{#freestyle-usage "street-address-themed" title="Themed"}}
          <StreetAddress @theme="cs-theme" />
        {{/freestyle-usage}}
        {{#freestyle-note "street-address-themed--notes"}}
          <p>Pass a pre-defined theme name to the <code>@theme</code> attribute on your component.</p>
          <p>Available themes: <code>cs-theme</code></p>
        {{/freestyle-note}}
        {{#freestyle-annotation}}
          <h2>How to Create a Theme for This Component</h2>
          <p>This component extends the <code>TextField</code> component. See instructions under the <i>Themed</i> tab on that component's page.</p>
        {{/freestyle-annotation}}
      {{/collection.variant}}
    {{/freestyle-collection}}
  {{/freestyle-section}}

  {{!-- DATE PICKER --}}
  {{#freestyle-section name="date-picker"}}
    {{#freestyle-collection title="date picker" defaultKey="default" inline=true as |collection|}}
      {{#freestyle-annotation}}
        <p>Allows user to select a date from calendar view or enter their own input. User can navigate the calendar using arrows or the month and year dropdowns.</p>
        Default validation for date input:
        <ul>
          <li>Valid for years as of 1900.</li>
          <li>Accounts for leap years.</li>
        </ul>
        <p>Default year range offered in the dropdown is from 1920 to 2070. However, this can be changed using <code>startYear</code> and <code>yearRange</code> attributes.</p>
      {{/freestyle-annotation}}
      {{#collection.variant key="default"}}
        {{#freestyle-usage "date-picker-optional" title="Default"}}
          <DatePicker @label="Date (MM/DD/YYYY)" />
        {{/freestyle-usage}}
      {{/collection.variant}}
      {{#collection.variant key="disabled"}}
        {{#freestyle-usage "date-picker-disabled" title="Disabled"}}
          <DatePicker @label="Date (MM/DD/YYYY)" @disabled={{true}} />
        {{/freestyle-usage}}
      {{/collection.variant}}
      {{#collection.variant key="required"}}
        {{#freestyle-usage "date-picker-required" title="Required"}}
          <DatePicker @label="Date (MM/DD/YYYY)" @required="true" />
        {{/freestyle-usage}}
      {{/collection.variant}}
      {{#collection.variant key="custom-years"}}
        {{#freestyle-note "date-picker-custom-years--notes"}}
          Using `startYear` and `yearRange` attributes to change the dropdown year range.
        {{/freestyle-note}}
        {{#freestyle-usage "date-picker-custom-years" title="Custom Years"}}
          <DatePicker @label="Date (MM/DD/YYYY)" @startYear="1980" @yearRange="50" />
        {{/freestyle-usage}}
      {{/collection.variant}}
      {{#collection.variant key="themed"}}
        {{#freestyle-usage "date-picker-themed" title="Themed"}}
          <DatePicker @label="Date (MM/DD/YYYY)" @theme="cs-theme" />
        {{/freestyle-usage}}
        {{#freestyle-note "date-picker-themed--notes"}}
          <p>Pass a pre-defined theme name to the <code>@theme</code> attribute on your component.</p>
          <p>Available themes: <code>cs-theme</code></p>
        {{/freestyle-note}}
        {{#freestyle-annotation}}
          <h2>How to Create a Theme for This Component</h2>
          <ol>
            <li>Define a new CSS class on your stylesheet.</li>
            <li>Change the values set to available CSS variables (see list below).</li>
            <li>The input and dropdown fields of this component extend the styles of the <code>TextField</code> and <code>Dropdown</code> component. See the instructions on those components' <i>Themed</i> pages.</li>
            <li>Pass the CSS class name to the <code>@theme</code> attribute on the component.</li>
          </ol>
          <h2>Supported CSS variables</h2>
          <ul>
            <li><code>--cs-date-background-color</code></li>
            <li><code>--cs-date-color</code></li>
          </ul>
        {{/freestyle-annotation}}
      {{/collection.variant}}
    {{/freestyle-collection}}
  {{/freestyle-section}}

  {{#freestyle-section name="File Upload Dialog"}}
    {{#freestyle-annotation}}
      <code>FileUploadDialog</code> can take in a few parameters

      <ul>
        <li><code>acceptedFormats</code> - (string) a read-friendly list of formats accepted (i.e. "png, jpg, gif"). This will get rendered below the file icon.</li>
        <li><code>accept</code> - (string) A list of MIME types / extensions to be accepted by the input i.e. "image/*" </li>
        <li><code>handleFile</code> - (function) function to handle uploading file to a server; <code>file</code> will be passed in</li>
      </ul>
    {{/freestyle-annotation}}
    {{#freestyle-usage "file-upload-dialog-default" title="File Upload Dialog"}}
      <FileUploadDialog @acceptedFormats="jpg, gif, png" />
    {{/freestyle-usage}}
  {{/freestyle-section}}

  {{!-- CUSTOM ROOT STYLES --}}
  {{#freestyle-section name="custom styles"}}
    {{#freestyle-annotation}}
      <p>To change the default styles across <em>ALL</em> Cardstack <code>ui-components</code>, set your own CSS values to the default root CSS variables below.</p>

      <p>If you're only looking to make changes to specific components, see more info on theming on that component's documentation.</p>

      <pre>
        <code>
          <strong>Root-level CSS custom properties with their default values:</strong>
          <strong>(Common across most ui-components. Exceptions in Cta component.)</strong>

        :root {
          <b>CSS custom property:</b>                 // <b>Default value:</b>

          <b>Text</b>
          --cs-component-color                        // dark-gray (#222)
          --cs-component-font-family                  // 'Open Sans', Arial, Helvetica, sans-serif
          --cs-component-font-size                    // 16px
          --cs-component-font-weight                  // 400
          --cs-component-letter-spacing               // 0
          --cs-component-line-height                  // 1.3

          <b>Background</b>
          --cs-component-background-color             // light-gray (#f5f5f5)
          --cs-component-background-highlight-color   // light-gray (#e8e8e8)

          <b>Sizing</b>
          --cs-component-max-width                    // 100%
          --cs-component-height                       // 60px

          <b>Spacing</b>
          --cs-component-padding-horizontal           // 15px
          --cs-component-padding-vertical             // 20px

          <b>Borders</b>
          --cs-component-border-color                 // gray (#707070)
          --cs-component-border-radius                // 2px

          <b>Box-shadow</b>
          --cs-component-box-shadow                   // none

          <b>Legend</b>
          --cs-component-legend-font-size             // 20px

          <b>Labels</b>
          --cs-component-label-color                  // gray (#5d5d5d)
          --cs-component-label-highlight-color        // purple (#6a3ca3) (active state, hover, focus, etc.)
          --cs-component-label-minimized-color        // --cs-component-label-color (filled-in state)

          <b>Selection</b>
          --cs-component-selected-color               // gray (#707070)

          // Disabled state:
          // --cs-component-disabled-color: TBD
          // --cs-component-disabled-background-color: TBD

          <b>Validation</b>
          --cs-component-valid                        // green (#58c949)
          --cs-component-invalid                      // pink (#ff5c5c)

          <b>A11y-related</b>
          --cs-component-outline-color                // light-blue
        }
        </code>
      </pre>
    {{/freestyle-annotation}}
  {{/freestyle-section}}
{{/freestyle-guide}}